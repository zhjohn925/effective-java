--java.io package
	1) File   //used to represent both Files and Directories
		-File f = new File(String name);
		-File f = new File(String subdir, String name);
		-File f = new File(File subdir, String name);	
	2) FileWriter
	3) FileReader
	4) BufferedWriter
	5) BufferedReader
	6) PrintWriter

--File f = new File("abc.txt");   //represent file
  //just create File object to represent the "abc.txt", 
  //  not create physical file yet. if the file "abc.txt" exists, 
  //  f points to the existing file.
  f.exists() //false
  //to create file:
  f.createNewFile();
  f.exists()  //now true

--File d = new File("durga");   //represent directory
  //to make directory
  d.mkdir();
  d.exists();  //true
  File f = new File(d, "demo.txt");

--//assume "E:\\xyz" folder is already existing.
  File f = new File("E:\\xyz", "demo.txt");
  f.createNewFile();  

--Important methods of File class:
	1) boolean exists();
	2) boolean createNewFile();  //create file if not existing, 
	                             //return true. otherwise, 
	                             //no action and return false
	3) boolean mkdir();
	4) boolean isFile();
	5) boolean isDirectory();
	6) String[] list();  //returns the names of files 
	                     //and directories present 
	                     //in specified directory.
	7) long length();    //returns number of characters 
	                     //in the specified file.
	8) boolean delete(); //to delete the file or
	                     //directory.

--FileWriter  - not recommended
  //The problem with FileWriter is we have to insert line 
  //  separator(\n) manually, which is varied from system 
  //  to system.
  //Constructors:
	//overriding existing data in the file.
	//create the file if not existing
	1) FileWriter fw = new FileWriter(String name);
	2) FileWriter fw = new FileWriter(File f);
	//append data in the file
	//create the file if not existing
	3) FileWriter fw = new FileWriter(String name, boolean append);
	4) FileWriter fw = new FileWriter(File f, boolean append);
  //Methods:
  1) write(int ch);
  2) write(char[] ch);
  3) write(String s);
  4) flush();  //to guarantee the total data written 
               //properly to the file
  5) close();

--FileReader  - not recommended
	//Used to read character data from the file.
	//The problem for FileReader is that we can not read line by line.
	//    ReadBuffer supports read line by line.
	//Constructors:
	1) FileReader fr = new FileReader(String fName);
	2) FileReader fr = new FileReader(File f);
	//Methods:
	3) int read(); //return unicode of next character
	               //  need type-casting ie. System.out.print((char)i);
	               //  return -1 if invalid data
	4) int read(char[] ch);
	               //return the number of character being read
	               //  example:
	               //  char[] ch = new char[(int)f.length()];
	               //  fr.read(ch); 
	5) void close();

--BufferedWriter
  //Used to write text (character) data to the file
  //Constructors:
  1) BufferedWriter bw = new BufferedWriter(Writer w);
  2) BufferedWriter bw = new BufferedWriter(Writer w, int buffersize);
  //example:
     BufferedWriter bw = new BufferedWriter(new FileWriter("abc.txt"));
     BufferedWriter bw = new BufferedWriter(new 
              BufferedWriter(new FileWriter("abc.txt")));
  //whenever closing BufferedWriter, the FileWriter will be 
  //  closed automatically.             
     bw.close();         
  //Methods:
  3) write(int ch);
  4) write(char[] ch);
  5) write(String s);
  6) flush();
  7) close();
  8) newLine();  //to insert a line separator (\n)

--BufferedReader
  //Used to read character data (text data) from the file
  //Constructors:
  1) BufferedReader br = new BufferedReader(Reader r);
  2) BufferedReader br = new BufferedReader(Reader r, int buffersize);
  //example:
      FileReader fr = new FileReader("abc.txt");
      BufferedReader br = new BufferedReader(fr);
  //whenever closing BufferedReader, the FileReader will be 
  //  closed automatically.         
      br.close();
  //Methods:
  3) int read();
  4) int read(char[] ch);
  5) void close();
  6) String readLine(); 

--PrintWriter
  //Used to write any type of primitive type data to the file
  //Constructors:
  1) PrintWriter pw = new PrintWriter(String filename);
  2) PrintWriter pw = new PrintWriter(File f);
  3) PrintWriter pw = new PrintWriter(Writer w);
  //Methods:
  4) write(int ch);
  5) write(char[] ch);
  6) write(String s);
  7) flush();
  8) close();
  9) print(char ch);  
       //or (int i), (double d), (boolean b), (String s)
  10) println(char ch);  
       //or (int i), (double d), (boolean b), (String s) 
  //Example:
  		pw.write(100);  // add 'd' to the file
  		pw.print(100);  // add 100 to the file     

--FileInputStream: 
  //Used to read Binary data from the file
  //   Binary data like images, video/audio files, 

--FileOutputStream:
	//Used to write Binary data to the file

--class inherit structure: (AC - Abstract class)

                             +---OuputStreamWriter<--FileWriter 
                             |  
             +--Writer(AC)<--+---BufferedWriter    
             |               |
	 Object <--+	             +---PrintWriter
	           |
	           |
	           +--Reader(AC)<--+---InputStreamReader<--FileReader
	                           |
	                           +---BufferedReader

